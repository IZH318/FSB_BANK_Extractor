/**
 * @file FSBDetailsForm.cs
 * @brief Form to display detailed information about FMOD Sound Bank (.fsb) files.
 * @author Github IZH318 (https://github.com/IZH318)
 *
 * @details
 * This form is designed to load and present comprehensive details of an FSB (FMOD Sound Bank) file.
 * Utilizing the FMOD API, it retrieves a wide range of properties from the FSB file and its constituent sub-sounds.
 * This rich information is then structured and displayed within a TreeView control, allowing users to easily navigate and inspect the FSB file's internal structure and sound properties.
 *
 * Key Features:
 * - Asynchronous loading of FSB file information to maintain UI responsiveness during potentially lengthy operations.
 * - Comprehensive display of FSB file properties, including:
 *   - Basic sound information (name, length, type, format, channels, bits per sample).
 *   - FSB file structure and sub-sound details (sub-sound count, individual sub-sound properties).
 *   - Metadata tag information (tag count, all tags text).
 *   - Streaming and loading status.
 *   - 3D sound settings (min/max distance, cone settings, custom rolloff).
 *   - Music-related information (for module formats).
 *   - Sync point information.
 *   - Default settings and loop information.
 *   - Object handles and user data.
 * - Error handling to gracefully manage issues during file loading or FMOD API interactions, providing informative error messages to the user.
 * - User-friendly TreeView interface for intuitive exploration of FSB file details.
 *
 * Dependencies:
 * - FMOD Studio API (version 2.03.06 or compatible).
 * - System.Windows.Forms for GUI elements, particularly TreeView and Label.
 * - System.IO for file path operations.
 * - System.Threading.Tasks for asynchronous operations.
 *
 * Note:
 * This form is intended to provide a detailed view of FSB file structure and properties for analysis and debugging purposes.
 * It complements the main FSB/BANK Extractor application by offering in-depth file inspection capabilities.
 */
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using FMOD;
using System.IO;

namespace FSB_BANK_Extractor_CS_GUI
{
    /**
     * @class FSBDetailsForm
     * @brief Form to display detailed information about an FSB file.
     *
     * @details
     * This form is used to load and display detailed information about an FSB (FMOD Sound Bank) file.
     * It uses the FMOD API to read various properties of the FSB file and its sub-sounds,
     * and presents this information in a TreeView control for easy navigation and inspection.
     * The form loads file information asynchronously to prevent blocking the UI thread and provides
     * error handling to gracefully manage potential issues during file loading or FMOD API calls.
     */
    public partial class FSBDetailsForm : Form
    {
        /**
         * @brief Constructor for FSBDetailsForm.
         *
         * @details
         * Initializes the FSBDetailsForm component. This constructor is automatically called when an instance of FSBDetailsForm is created.
         */
        public FSBDetailsForm()
        {
            InitializeComponent(); // Initializes the form and its controls. This method is generated by the designer.
        }

        /**
         * @brief Loads and displays FSB file information asynchronously.
         *
         * @param fsbFilePath The path to the FSB file to load information from.
         *
         * @details
         * This asynchronous method is the main entry point for loading FSB file information into the form.
         * It clears any existing nodes in the TreeView, makes the loading label visible, and then performs
         * the actual file information loading in a background task to prevent UI blocking.
         * Upon completion, it populates the TreeView with the loaded information and handles any exceptions that may occur.
         * Finally, it ensures that FMOD system and sound objects are properly released and hides the loading label.
         */
        public async void LoadFSBInfo(string fsbFilePath)
        {
            FMOD.System system = default(FMOD.System); // Initialize FMOD System object to default (null)
            FMOD.Sound sound = default(FMOD.Sound);  // Initialize FMOD Sound object to default (null)

            try
            {
                treeViewDetails.Nodes.Clear(); // Clear any existing nodes in the TreeView before loading new information.
                labelLoading.Visible = true;    // Show the loading label to indicate that the operation is in progress.
                labelLoading.Text = "Loading file information..."; // Set the text of the loading label.
                await Task.Delay(1); // Introduce a minimal delay to ensure the UI updates and shows the loading label.

                TreeNode rootNode = await Task.Run(() => LoadFSBInfoAsync(fsbFilePath, out system, out sound)); // Run the FSB info loading process asynchronously in a background task.

                if (rootNode != null) // Check if rootNode is not null, meaning FSB info loading was successful.
                {
                    treeViewDetails.Nodes.Add(rootNode); // Add the root node (containing all FSB info) to the TreeView.
                    treeViewDetails.BeginInvoke(new Action(() => treeViewDetails.TopNode = treeViewDetails.Nodes[0])); // Ensure that the top node is visible and focused after loading.
                    treeViewDetails.ExpandAll(); // Expand all nodes in the TreeView to display all levels of information.
                }

            }
            catch (Exception ex) // Catch any exceptions that occur during the FSB information loading process.
            {
                MessageBox.Show($"FSB file information load error: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); // Display an error message box to the user with details of the exception.
            }
            finally
            {
                if (sound.hasHandle()) // Check if the FMOD Sound object has a valid handle before attempting to release.
                {
                    sound.release();    // Release the FMOD Sound object to free resources.
                    sound.clearHandle(); // Clear the handle of the FMOD Sound object.
                }
                if (system.hasHandle()) // Check if the FMOD System object has a valid handle before attempting to close and release.
                {
                    system.close();     // Close the FMOD system.
                    system.release();   // Release the FMOD system object to free resources.
                    system.clearHandle(); // Clear the handle of the FMOD System object.
                }
                labelLoading.Visible = false; // Hide the loading label after the operation is complete, regardless of success or failure.
            }
        }

        /**
         * @brief Asynchronously loads FSB file information using FMOD API and populates a TreeNode.
         *
         * @param fsbFilePath The path to the FSB file.
         * @param outSystem Output parameter to return the FMOD System object.
         * @param outSound Output parameter to return the FMOD Sound object.
         * @return TreeNode The root TreeNode containing FSB file information, or null if loading fails.
         *
         * @details
         * This asynchronous method performs the core logic of loading FSB file information using the FMOD API.
         * It initializes the FMOD system, creates a sound object from the FSB file, and then retrieves
         * various properties of the sound and its sub-sounds. This information is organized into a hierarchical
         * TreeNode structure, with different categories of information as child nodes.
         * The method handles FMOD API calls, error checking, and populating the TreeNode with FSB details.
         * It returns the root TreeNode containing all loaded information or null if an exception occurs during loading.
         */
        private TreeNode LoadFSBInfoAsync(string fsbFilePath, out FMOD.System outSystem, out FMOD.Sound outSound)
        {
            FMOD.System system = default(FMOD.System); // Initialize FMOD System object to default (null)
            FMOD.Sound sound = default(FMOD.Sound);  // Initialize FMOD Sound object to default (null)
            TreeNode rootNode = new TreeNode(Path.GetFileName(fsbFilePath)); // Create root TreeNode with the FSB file name.

            try
            {
                FMOD.Factory.System_Create(out system); // Create the FMOD System object.
                FSB_BANK_Extractor_CS_GUI.CheckFMODResult(system.init(32, FMOD.INITFLAGS.NORMAL, IntPtr.Zero), "FMOD::System::init failed in FSBDetailsForm"); // Initialize the FMOD system.

                FMOD.CREATESOUNDEXINFO exinfo = new FMOD.CREATESOUNDEXINFO(); // Create extended sound creation info structure.
                exinfo.cbsize = System.Runtime.InteropServices.Marshal.SizeOf(exinfo); // Set the size of the structure.
                FMOD.RESULT result = system.createSound(fsbFilePath, FMOD.MODE.CREATESTREAM | MODE._3D_HEADRELATIVE, ref exinfo, out sound); // Create a sound object from the FSB file, using CREATESTREAM mode for efficiency.
                FSB_BANK_Extractor_CS_GUI.CheckFMODResult(result, $"FMOD::System::createSound failed for {fsbFilePath} in FSBDetailsForm"); // Check for errors during sound creation.


                // --- 1. Basic Information (TreeView Node) ---
                TreeNode basicSoundInfoNode = new TreeNode("Basic Information"); // Create a TreeNode for Basic Information category.
                basicSoundInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(basicSoundInfoNode); // Add Basic Information node to the root node.

                AddDetailRow(basicSoundInfoNode, "Sound Name", sound.getSoundName()); // Add a row for Sound Name.
                AddDetailRow(basicSoundInfoNode, "Sound Length (ms)", sound.getLengthMs().ToString()); // Add a row for Sound Length in milliseconds.
                AddDetailRow(basicSoundInfoNode, "Sound Type (SOUND_TYPE)", sound.getSoundType().ToString()); // Add a row for Sound Type (FMOD enum value).
                AddDetailRow(basicSoundInfoNode, "Sound Format (SOUND_FORMAT)", sound.getSoundFormat().ToString()); // Add a row for Sound Format (FMOD enum value).
                AddDetailRow(basicSoundInfoNode, "Channel Count", sound.getChannels().ToString()); // Add a row for Channel Count.
                AddDetailRow(basicSoundInfoNode, "Bits Per Sample", sound.getBitsPerSample().ToString()); // Add a row for Bits Per Sample.

                // --- 2. FSB File Structure and Sub Sound Information (TreeView Node) ---
                TreeNode subsoundInfoNode = new TreeNode("FSB File Structure and Sub Sound Information"); // Create a TreeNode for Sub Sound Information category.
                subsoundInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(subsoundInfoNode); // Add Sub Sound Information node to the root node.

                AddDetailRow(subsoundInfoNode, "Sub Sound Count", sound.getNumSubSounds().ToString()); // Add a row for Sub Sound Count.

                int numSubSounds = sound.getNumSubSounds(); // Get the number of sub-sounds in the FSB file.
                if (numSubSounds > 0) // Check if there are any sub-sounds.
                {
                    TreeNode subSoundsRootNode = new TreeNode("Sub Sound List"); // Create a root node for the list of sub-sounds.
                    subsoundInfoNode.Nodes.Add(subSoundsRootNode); // Add Sub Sound List node under Sub Sound Information node.

                    for (int i = 0; i < numSubSounds; i++) // Loop through each sub-sound.
                    {
                        FMOD.Sound subSound = sound.getSubSound(i); // Get the FMOD Sound object for the current sub-sound.
                        {
                            TreeNode subSoundItemNode = new TreeNode($"Sub Sound {i + 1}"); // Create a TreeNode for each sub-sound item.
                            subSoundsRootNode.Nodes.Add(subSoundItemNode); // Add Sub Sound Item node under Sub Sound List node.

                            AddDetailRow(subSoundItemNode, "Sound Name", subSound.getSoundName()); // Add a row for Sub Sound Name.
                            AddDetailRow(subSoundItemNode, "Sound Length (ms)", subSound.getLengthMs().ToString()); // Add a row for Sub Sound Length in milliseconds.
                            AddDetailRow(subSoundItemNode, "Sound Type (SOUND_TYPE)", subSound.getSoundType().ToString()); // Add a row for Sub Sound Type (FMOD enum value).
                            AddDetailRow(subSoundItemNode, "Sound Format (SOUND_FORMAT)", subSound.getSoundFormat().ToString()); // Add a row for Sub Sound Format (FMOD enum value).
                            AddDetailRow(subSoundItemNode, "Channel Count", subSound.getChannels().ToString()); // Add a row for Sub Sound Channel Count.
                            AddDetailRow(subSoundItemNode, "Bits Per Sample", subSound.getBitsPerSample().ToString()); // Add a row for Sub Sound Bits Per Sample.
                            AddDetailRow(subSoundItemNode, "Sub Sound Handle (FMOD.Sound Object)", subSound.getSoundObjectHandle()); // Add a row for Sub Sound object handle (pointer). More descriptive name.
                            AddDetailRow(subSoundItemNode, "Sub Sound Parent Handle (FMOD.Sound Object)", subSound.getParentSoundObjectHandle()); // Add a row for Sub Sound parent object handle (pointer). More descriptive name.

                            subSound.release(); // Release the sub-sound object after retrieving information to free resources.
                        }
                    }
                }

                // --- 3. Metadata Tag Information (TreeView Node) ---
                TreeNode tagInfoNode = new TreeNode("Metadata Tag Information"); // Create a TreeNode for Metadata Tag Information category.
                tagInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(tagInfoNode); // Add Metadata Tag Information node to the root node.

                AddDetailRow(tagInfoNode, "Tag Count", sound.getNumTags().ToString()); // Add a row for Tag Count.
                AddDetailRow(tagInfoNode, "Tag Information (All)", sound.getAllTagsText()); // Add a row to display all tag information as text.

                // --- 4. Streaming and Loading Status Information (TreeView Node) ---
                TreeNode openStateInfoNode = new TreeNode("Streaming and Loading Status Information"); // Create a TreeNode for Streaming and Loading Status category.
                openStateInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(openStateInfoNode); // Add Streaming and Loading Status Information node to the root node.

                var openStateInfo = sound.getOpenStateInfo(); // Get open state information using extension method.
                AddDetailRow(openStateInfoNode, "Open State (OPENSTATE)", openStateInfo.openState.ToString()); // Add a row for Open State (FMOD enum value).
                AddDetailRow(openStateInfoNode, "Buffering Progress (%)", openStateInfo.percentBuffered.ToString()); // Add a row for Buffering Progress percentage.
                AddDetailRow(openStateInfoNode, "Starving State", openStateInfo.starving.ToString()); // Add a row for Starving State (boolean).
                AddDetailRow(openStateInfoNode, "Disk Busy State", openStateInfo.diskBusy.ToString()); // Add a row for Disk Busy State (boolean).

                // --- 5. 3D Sound Related Information (TreeView Node) ---
                TreeNode _3dSoundInfoNode = new TreeNode("3D Sound Related Information"); // Create a TreeNode for 3D Sound Related Information category.
                _3dSoundInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(_3dSoundInfoNode); // Add 3D Sound Related Information node to the root node.

                var distanceInfo3D = sound.get3DMinMaxDistance(); // Get 3D minimum and maximum distance information using extension method.
                AddDetailRow(_3dSoundInfoNode, "3D Minimum Distance", distanceInfo3D.minDistance3D.ToString()); // Add a row for 3D Minimum Distance.
                AddDetailRow(_3dSoundInfoNode, "3D Maximum Distance", distanceInfo3D.maxDistance3D.ToString()); // Add a row for 3D Maximum Distance.

                var coneSettings3D = sound.get3DConeSettings(); // Get 3D cone settings information using extension method.
                string coneSettingsText = $"Inside Angle: {coneSettings3D.insideConeAngle}, Outside Angle: {coneSettings3D.outsideConeAngle}, Outside Volume: {coneSettings3D.outsideVolume}"; // Format cone settings into a string.
                AddDetailRow(_3dSoundInfoNode, "3D Cone Settings", coneSettingsText); // Add a row for 3D Cone Settings.

                var rolloffInfo3D = sound.get3DCustomRolloffInfo(); // Get 3D custom rolloff information using extension method.
                string rolloffText = $"Pointer: {rolloffInfo3D.customRolloffPointsPtr}, Point Count: {rolloffInfo3D.numRolloffPoints}"; // Format rolloff info into a string.
                AddDetailRow(_3dSoundInfoNode, "3D Custom RollOff (Pointer)", rolloffText); // Add a row for 3D Custom RollOff pointer.
                AddDetailRow(_3dSoundInfoNode, "3D Custom RollOff (Point Count)", rolloffInfo3D.numRolloffPoints.ToString()); // Add a row for 3D Custom RollOff point count.

                // --- 6. Music Related Information (Module Format) (TreeView Node) ---
                TreeNode musicInfoNode = new TreeNode("Music Related Information (Module Format)"); // Create a TreeNode for Music Related Information category.
                musicInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(musicInfoNode); // Add Music Related Information node to the root node.

                AddDetailRow(musicInfoNode, "Music Channel Count", sound.getMusicNumChannels().ToString()); // Add a row for Music Channel Count.
                AddDetailRow(musicInfoNode, "Music Channel Volume (Channel 0)", sound.getMusicChannelVolume().ToString()); // Add a row for Music Channel Volume (for channel 0).
                AddDetailRow(musicInfoNode, "Music Speed", sound.getMusicSpeed().ToString()); // Add a row for Music Speed.

                // --- 7. Sync Point Information (TreeView Node) ---
                TreeNode syncPointSectionNode = new TreeNode("Sync Point Information"); // Create a TreeNode for Sync Point Information category.
                syncPointSectionNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(syncPointSectionNode); // Add Sync Point Information node to the root node.

                AddDetailRow(syncPointSectionNode, "Sync Point Count", sound.getNumSyncPoints().ToString()); // Add a row for Sync Point Count.
                AddDetailRow(syncPointSectionNode, "Sync Point Information (All)", sound.getAllSyncPointsText()); // Add a row to display all sync point information as text.

                // --- 8. Default Settings and Loop Information (TreeView Node) ---
                TreeNode defaultsAndLoopInfoNode = new TreeNode("Default Settings and Loop Information"); // Create a TreeNode for Default Settings and Loop Information category.
                defaultsAndLoopInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(defaultsAndLoopInfoNode); // Add Default Settings and Loop Information node to the root node.

                var defaultsInfo = sound.getDefaultsInfo(); // Get default frequency and priority information using extension method.
                AddDetailRow(defaultsAndLoopInfoNode, "Default Frequency", defaultsInfo.defaultFrequency.ToString()); // Add a row for Default Frequency.
                AddDetailRow(defaultsAndLoopInfoNode, "Default Priority", defaultsInfo.defaultPriority.ToString()); // Add a row for Default Priority.

                AddDetailRow(defaultsAndLoopInfoNode, "Loop Mode (MODE)", sound.getLoopMode().ToString()); // Add a row for Loop Mode (FMOD enum value).
                AddDetailRow(defaultsAndLoopInfoNode, "Loop Count", sound.getLoopCount().ToString()); // Add a row for Loop Count.

                var loopPointsInfo = sound.getLoopPointsInfo(); // Get loop points information using extension method.
                AddDetailRow(defaultsAndLoopInfoNode, "Loop Start Point (ms)", loopPointsInfo.loopStartMs.ToString()); // Add a row for Loop Start Point in milliseconds.
                AddDetailRow(defaultsAndLoopInfoNode, "Loop End Point (ms)", loopPointsInfo.loopEndMs.ToString()); // Add a row for Loop End Point in milliseconds.

                // --- 9. Other Information (TreeView Node) ---
                TreeNode otherInfoNode = new TreeNode("Other Information"); // Create a TreeNode for Other Information category.
                otherInfoNode.NodeFont = new Font(treeViewDetails.Font.FontFamily, treeViewDetails.Font.Size, FontStyle.Bold); // Set node font to bold for emphasis.
                rootNode.Nodes.Add(otherInfoNode); // Add Other Information node to the root node.

                AddDetailRow(otherInfoNode, "Sound Group Handle (FMOD.SoundGroup Object)", sound.getSoundGroupObjectHandle()); // Add a row for Sound Group object handle (pointer). More descriptive name.
                AddDetailRow(otherInfoNode, "System Object Handle (FMOD.System Object)", sound.getSystemObjectHandle()); // Add a row for System Object handle (pointer). More descriptive name.
                AddDetailRow(otherInfoNode, "User Data Pointer", sound.getUserDataPointer()); // Add a row for User Data pointer.

                return rootNode; // Return the populated root TreeNode.

            }
            catch (Exception) // Catch any exceptions during FSB info loading.
            {
                return null; // Return null to indicate that FSB info loading failed.
            }
            finally
            {
                outSystem = system; // Set the outSystem parameter to the FMOD System object (for disposal in the calling method).
                outSound = sound;  // Set the outSound parameter to the FMOD Sound object (for disposal in the calling method).
            }
        }

        /**
         * @brief Adds a detail row (child node) to a parent TreeNode in the TreeView.
         *
         * @param parentNode The parent TreeNode to which the detail row will be added.
         * @param itemText The text for the detail item (e.g., "Sound Name").
         * @param valueText The value text for the detail item (e.g., the actual sound name).
         *
         * @details
         * This private helper method simplifies the process of adding a new row of detail information
         * to the TreeView. It creates a new TreeNode with the combined itemText and valueText,
         * and adds it as a child node to the specified parentNode. This method is used to populate
         * the TreeView with FSB file properties in a structured and readable format.
         */
        private void AddDetailRow(TreeNode parentNode, string itemText, string valueText)
        {
            TreeNode itemNode = new TreeNode($"{itemText}: {valueText}"); // Create a new TreeNode for the detail row, combining item text and value text.
            parentNode.Nodes.Add(itemNode); // Add the detail row node to the specified parent node.
        }

        /**
         * @brief Shows the loading label and sets its text to indicate loading status.
         *
         * @details
         * This public method is used to display the loading label on the form and set its text to "Loading file information...".
         * It is typically called before starting a long-running operation, such as loading FSB file information,
         * to provide visual feedback to the user that the application is working and has not frozen.
         */
        public void ShowLoadingLabel()
        {
            labelLoading.Visible = true; // Make the loading label visible.
            labelLoading.Text = "Loading file information..."; // Set the text of the loading label to "Loading file information...".
        }
    }

    /**
     * @class FMODSoundExtensions
     * @brief Provides extension methods for the FMOD.Sound class to simplify information retrieval.
     *
     * @details
     * This static class contains a collection of extension methods for the FMOD.Sound class.
     * These methods are designed to simplify the process of retrieving various properties and information
     * from FMOD Sound objects, such as sound name, length, format, channels, tags, and 3D settings.
     * Each method encapsulates the FMOD API calls and error handling, returning user-friendly values
     * or default values in case of errors, improving code readability and maintainability in FSBDetailsForm.
     */
    public static class FMODSoundExtensions
    {
        /**
         * @brief Extension method to get the sound name from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the name from.
         * @return string The name of the sound, or "No Information" if retrieval fails.
         */
        public static string getSoundName(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getName(out string name, 256); // Get the sound name from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? name : "No Information"; // Return the name if successful, otherwise return "No Information".
        }

        /**
         * @brief Extension method to get the sound length in milliseconds from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the length from.
         * @return uint The length of the sound in milliseconds, or 0 if retrieval fails.
         */
        public static uint getLengthMs(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getLength(out uint lengthMs, FMOD.TIMEUNIT.MS); // Get the sound length in milliseconds from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? lengthMs : 0; // Return the length if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get the sound type (SOUND_TYPE) from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the sound type from.
         * @return FMOD.SOUND_TYPE The sound type, or FMOD.SOUND_TYPE.UNKNOWN if retrieval fails.
         */
        public static FMOD.SOUND_TYPE getSoundType(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getFormat(out FMOD.SOUND_TYPE soundType, out _, out _, out _); // Get the sound type from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? soundType : FMOD.SOUND_TYPE.UNKNOWN; // Return the sound type if successful, otherwise return UNKNOWN.
        }

        /**
         * @brief Extension method to get the sound format (SOUND_FORMAT) from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the sound format from.
         * @return FMOD.SOUND_FORMAT The sound format, or FMOD.SOUND_FORMAT.NONE if retrieval fails.
         */
        public static FMOD.SOUND_FORMAT getSoundFormat(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getFormat(out _, out FMOD.SOUND_FORMAT soundFormat, out _, out _); // Get the sound format from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? soundFormat : FMOD.SOUND_FORMAT.NONE; // Return the sound format if successful, otherwise return NONE.
        }
        /**
         * @brief Extension method to get the channel count from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the channel count from.
         * @return int The number of channels, or 0 if retrieval fails.
         */
        public static int getChannels(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getFormat(out _, out _, out int channels, out _); // Get the channel count from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? channels : 0; // Return the channel count if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get the bits per sample from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get bits per sample from.
         * @return int The bits per sample, or 0 if retrieval fails.
         */
        public static int getBitsPerSample(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getFormat(out _, out _, out _, out int bitsPerSample); // Get the bits per sample from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? bitsPerSample : 0; // Return bits per sample if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get the number of sub-sounds in an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the sub-sound count from.
         * @return int The number of sub-sounds, or 0 if retrieval fails.
         */
        public static int getNumSubSounds(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getNumSubSounds(out int numSubSounds); // Get the number of sub-sounds from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? numSubSounds : 0; // Return the number of sub-sounds if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get a specific sub-sound from an FMOD.Sound object by index.
         *
         * @param sound The FMOD.Sound object to get the sub-sound from.
         * @param index The index of the sub-sound to retrieve.
         * @return FMOD.Sound The retrieved sub-sound object, or default(FMOD.Sound) if retrieval fails.
         */
        public static FMOD.Sound getSubSound(this FMOD.Sound sound, int index)
        {
            FMOD.RESULT result = sound.getSubSound(index, out FMOD.Sound subSound); // Get a specific sub-sound from the FMOD Sound object by index.
            return result == FMOD.RESULT.OK ? subSound : default(FMOD.Sound); // Return the sub-sound object if successful, otherwise return default FMOD.Sound object (null).
        }

        /**
         * @brief Extension method to get the handle (pointer as string) of an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the handle from.
         * @return string The handle of the sound object as a string, or "None" if no handle.
         */
        public static string getSoundObjectHandle(this FMOD.Sound sound)
        {
            return sound.hasHandle() ? sound.handle.ToString() : "None"; // Return the handle as a string if sound object has a valid handle, otherwise return "None".
        }

        /**
         * @brief Extension method to get the parent sound object handle (pointer as string) of an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the parent sound object handle from.
         * @return string The handle of the parent sound object as a string, or "None" if no parent or retrieval fails.
         */
        public static string getParentSoundObjectHandle(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getSubSoundParent(out FMOD.Sound parentSound); // Get the parent sound object of the FMOD Sound object.
            return parentSound.hasHandle() ? parentSound.handle.ToString() : "None"; // Return the parent sound object handle as a string if it has a valid handle, otherwise return "None".
        }

        /**
         * @brief Extension method to get the number of tags in an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get the tag count from.
         * @return int The number of tags, or 0 if retrieval fails.
         */
        public static int getNumTags(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getNumTags(out int numTags, out _); // Get the number of tags from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? numTags : 0; // Return the number of tags if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get all tags information as formatted text from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get tags information from.
         * @return string Formatted string containing information about all tags, or "None" if no tags or retrieval fails.
         *
         * @details
         * Retrieves all tags from the FMOD.Sound object and formats their information into a string.
         * For each tag, it includes the tag index, type, data type, name, and data length.
         * If there are no tags or if tag retrieval fails, it returns "None".
         */
        public static string getAllTagsText(this FMOD.Sound sound)
        {
            int numTags = sound.getNumTags(); // Get the number of tags in the FMOD Sound object.
            StringBuilder allTagsText = new StringBuilder(); // StringBuilder to efficiently build the formatted tags text.
            if (numTags > 0) // Check if there are any tags.
            {
                for (int tagIndex = 0; tagIndex < numTags; tagIndex++) // Loop through each tag.
                {
                    FMOD.TAG tag = new FMOD.TAG(); // Create a new TAG struct to store tag information.
                    FMOD.RESULT result = sound.getTag(null, tagIndex, out tag); // Get tag information for the current tag index.
                    if (result == FMOD.RESULT.OK) // Check if tag retrieval was successful.
                    {
                        allTagsText.AppendLine($"[{tagIndex + 1}] Type: {tag.type}, Data Type: {tag.datatype}, Name: {tag.name}, Length: {tag.datalen}"); // Append formatted tag information to the StringBuilder.
                    }
                }
            }
            else // If there are no tags.
            {
                allTagsText.AppendLine("None"); // Append "None" to indicate no tags found.
            }
            return allTagsText.ToString(); // Return the complete formatted tags text as a string.
        }

        /**
         * @brief Extension method to get open state information from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get open state information from.
         * @return A tuple containing open state, buffering progress, starving state, and disk busy state.
         */
        public static (FMOD.OPENSTATE openState, uint percentBuffered, bool starving, bool diskBusy) getOpenStateInfo(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getOpenState(out FMOD.OPENSTATE openState, out uint percentBuffered, out bool starving, out bool diskBusy); // Get open state information from the FMOD Sound object.
            return (openState, percentBuffered, starving, diskBusy); // Return the tuple containing open state information.
        }

        /**
         * @brief Extension method to get 3D minimum and maximum distance from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get 3D distance information from.
         * @return A tuple containing 3D minimum and maximum distance.
         */
        public static (float minDistance3D, float maxDistance3D) get3DMinMaxDistance(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.get3DMinMaxDistance(out float minDistance3D, out float maxDistance3D); // Get 3D minimum and maximum distance from the FMOD Sound object.
            return (minDistance3D, maxDistance3D); // Return the tuple containing 3D distance information.
        }

        /**
         * @brief Extension method to get 3D cone settings from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get 3D cone settings from.
         * @return A tuple containing 3D cone settings (inside cone angle, outside cone angle, outside volume).
         */
        public static (float insideConeAngle, float outsideConeAngle, float outsideVolume) get3DConeSettings(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.get3DConeSettings(out float insideConeAngle, out float outsideConeAngle, out float outsideVolume); // Get 3D cone settings from the FMOD Sound object.
            return (insideConeAngle, outsideConeAngle, outsideVolume); // Return the tuple containing 3D cone settings information.
        }

        /**
         * @brief Extension method to get 3D custom rolloff information from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get 3D custom rolloff info from.
         * @return A tuple containing 3D custom rolloff pointer and number of rolloff points.
         */
        public static (IntPtr customRolloffPointsPtr, int numRolloffPoints) get3DCustomRolloffInfo(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.get3DCustomRolloff(out IntPtr customRolloffPointsPtr, out int numRolloffPoints); // Get 3D custom rolloff information from the FMOD Sound object.
            return (customRolloffPointsPtr, numRolloffPoints); // Return the tuple containing 3D custom rolloff information.
        }

        /**
         * @brief Extension method to get the number of music channels from an FMOD.Sound object (for module formats like MOD, IT, XM, S3M).
         *
         * @param sound The FMOD.Sound object to get music channel count from.
         * @return int The number of music channels, or 0 if retrieval fails or not a module format.
         */
        public static int getMusicNumChannels(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getMusicNumChannels(out int musicChannels); // Get the number of music channels from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? musicChannels : 0; // Return the number of music channels if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get the music channel volume (for channel 0) from an FMOD.Sound object (for module formats).
         *
         * @param sound The FMOD.Sound object to get music channel volume from.
         * @return float The music channel volume, or 0 if retrieval fails or not a module format.
         */
        public static float getMusicChannelVolume(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getMusicChannelVolume(0, out float volume); // Get the music channel volume for channel 0 from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? volume : 0; // Return the music channel volume if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get the music speed from an FMOD.Sound object (for module formats).
         *
         * @param sound The FMOD.Sound object to get music speed from.
         * @return float The music speed, or 0 if retrieval fails or not a module format.
         */
        public static float getMusicSpeed(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getMusicSpeed(out float speed); // Get the music speed from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? speed : 0; // Return the music speed if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get the number of sync points in an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get sync point count from.
         * @return int The number of sync points, or 0 if retrieval fails or no sync points.
         */
        public static int getNumSyncPoints(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getNumSyncPoints(out int numSyncPoints); // Get the number of sync points from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? numSyncPoints : 0; // Return the number of sync points if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get all sync points information as formatted text from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get sync points information from.
         * @return string Formatted string containing information about all sync points, or "None" if no sync points or retrieval fails.
         *
         * @details
         * Retrieves all sync points from the FMOD.Sound object and formats their information into a string.
         * For each sync point, it includes the sync point index, name, and offset in milliseconds.
         * If there are no sync points or if tag retrieval fails, it returns "None".
         */
        public static string getAllSyncPointsText(this FMOD.Sound sound)
        {
            int numSyncPoints = sound.getNumSyncPoints(); // Get the number of sync points in the FMOD Sound object.
            StringBuilder allSyncPointsText = new StringBuilder(); // StringBuilder to efficiently build the formatted sync points text.
            if (numSyncPoints > 0) // Check if there are any sync points.
            {
                for (int syncPointIndex = 0; syncPointIndex < numSyncPoints; syncPointIndex++) // Loop through each sync point.
                {
                    IntPtr syncPointPtr; // IntPtr to store the pointer to the sync point.
                    FMOD.RESULT result = sound.getSyncPoint(syncPointIndex, out syncPointPtr); // Get the sync point pointer for the current sync point index.
                    if (result == FMOD.RESULT.OK) // Check if sync point retrieval was successful.
                    {
                        string syncPointName = ""; // String to store the sync point name.
                        uint syncPointOffset = 0;  // Uint to store the sync point offset.
                        sound.getSyncPointInfo(syncPointPtr, out syncPointName, 256, out syncPointOffset, FMOD.TIMEUNIT.MS); // Get sync point information using the pointer, including name and offset in milliseconds.
                        allSyncPointsText.AppendLine($"[{syncPointIndex + 1}] Name: {syncPointName}, Offset (ms): {syncPointOffset}"); // Append formatted sync point information to the StringBuilder.
                    }
                }
            }
            else // If there are no sync points.
            {
                allSyncPointsText.AppendLine("None"); // Append "None" to indicate no sync points found.
            }
            return allSyncPointsText.ToString(); // Return the complete formatted sync points text as a string.
        }

        /**
         * @brief Extension method to get default frequency and priority information from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get default settings info from.
         * @return A tuple containing default frequency and default priority.
         */
        public static (float defaultFrequency, int defaultPriority) getDefaultsInfo(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getDefaults(out float defaultFrequency, out int defaultPriority); // Get default frequency and priority from the FMOD Sound object.
            return (defaultFrequency, defaultPriority); // Return the tuple containing default settings information.
        }

        /**
         * @brief Extension method to get the loop mode from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get loop mode from.
         * @return FMOD.MODE The loop mode, or FMOD.MODE.DEFAULT if retrieval fails.
         */
        public static FMOD.MODE getLoopMode(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getMode(out FMOD.MODE loopMode); // Get the loop mode from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? loopMode : FMOD.MODE.DEFAULT; // Return the loop mode if successful, otherwise return DEFAULT.
        }

        /**
         * @brief Extension method to get the loop count from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get loop count from.
         * @return int The loop count, or 0 if retrieval fails.
         */
        public static int getLoopCount(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getLoopCount(out int loopCount); // Get the loop count from the FMOD Sound object.
            return result == FMOD.RESULT.OK ? loopCount : 0; // Return the loop count if successful, otherwise return 0.
        }

        /**
         * @brief Extension method to get loop points information from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get loop points info from.
         * @return A tuple containing loop start and end points in milliseconds.
         */
        public static (uint loopStartMs, uint loopEndMs) getLoopPointsInfo(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getLoopPoints(out uint loopStartMs, FMOD.TIMEUNIT.MS, out uint loopEndMs, FMOD.TIMEUNIT.MS); // Get loop points information from the FMOD Sound object in milliseconds.
            return (loopStartMs, loopEndMs); // Return the tuple containing loop points information.
        }

        /**
         * @brief Extension method to get the sound group object handle (pointer as string) from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get sound group object handle from.
         * @return string The handle of the sound group object as a string, or "None" if no sound group or retrieval fails.
         */
        public static string getSoundGroupObjectHandle(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getSoundGroup(out FMOD.SoundGroup soundGroup); // Get the sound group object from the FMOD Sound object.
            return soundGroup.hasHandle() ? soundGroup.handle.ToString() : "None"; // Return the sound group object handle as a string if it has a valid handle, otherwise return "None".
        }

        /**
         * @brief Extension method to get the system object handle (pointer as string) from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get system object handle from.
         * @return string The handle of the system object as a string, or "None" if no system object or retrieval fails.
         */
        public static string getSystemObjectHandle(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getSystemObject(out FMOD.System systemObject); // Get the system object from the FMOD Sound object.
            return systemObject.hasHandle() ? systemObject.handle.ToString() : "None"; // Return the system object handle as a string if it has a valid handle, otherwise return "None".
        }

        /**
         * @brief Extension method to get the user data pointer (as hexadecimal string) from an FMOD.Sound object.
         *
         * @param sound The FMOD.Sound object to get user data pointer from.
         * @return string The user data pointer as a hexadecimal string (e.g., "X8" format).
         */
        public static string getUserDataPointer(this FMOD.Sound sound)
        {
            FMOD.RESULT result = sound.getUserData(out IntPtr userDataPtr); // Get the user data pointer from the FMOD Sound object.
            return userDataPtr.ToString("X8"); // Return the user data pointer as a hexadecimal string (8 digits).
        }
    }
}